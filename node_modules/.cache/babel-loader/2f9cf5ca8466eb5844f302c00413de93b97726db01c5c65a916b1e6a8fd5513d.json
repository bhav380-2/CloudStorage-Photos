{"ast":null,"code":"var _jsxFileName = \"/home/codex/skills/webDev/react/project/photofolio/photos/src/components/ImagesForm.js\",\n  _s = $RefreshSig$();\n// importing hooks, firebase, toastify\nimport { useEffect, useRef } from \"react\";\nimport { db } from \"../firebaseInit\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { doc, updateDoc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImagesForm({\n  addImage,\n  newimageDetails,\n  showImagesForm,\n  setShowImagesForm,\n  setNewimageDetails\n}) {\n  _s();\n  // use ref for handling the input field values\n  const titleRef = useRef();\n  const urlRef = useRef();\n\n  // use effect for auto-focusing on the input once page is loaded\n  useEffect(() => {\n    titleRef.current.focus();\n  });\n  // use effect for auto filling the details of the img which was selected for editing\n  useEffect(() => {\n    if (newimageDetails) {\n      titleRef.current.value = newimageDetails.imgData.imgTitle;\n      urlRef.current.value = newimageDetails.imgData.imgUrl;\n    }\n  }, [newimageDetails]);\n\n  // function to clear the input fields and to focus on title input\n  function clearInputs() {\n    titleRef.current.value = \"\";\n    urlRef.current.value = \"\";\n    titleRef.current.focus();\n  }\n\n  // function to check dead link\n  function checkURL(url) {\n    const img = new Image();\n    img.src = url;\n    return new Promise((resolve, reject) => {\n      img.onload = () => resolve(true);\n      img.onerror = () => reject(false);\n    });\n  }\n\n  // function to handle the editing or adding of the img based on the status of the link\n  function submit() {\n    let title = titleRef.current.value;\n    let url = urlRef.current.value;\n    if (title.trim()) {\n      checkURL(url).then(() => {\n        // if url is active edit it or add it based on what user intents\n        if (newimageDetails) {\n          const {\n            id,\n            data,\n            index\n          } = newimageDetails;\n          let temp = [...data];\n          temp.splice(index, 1);\n          for (let i of temp) {\n            if (title === i.imgTitle) {\n              toast.error(\"Image Already Exists\");\n              return;\n            }\n          }\n          data.splice(index, 1, {\n            imgTitle: title,\n            imgUrl: url\n          });\n          const update = async () => {\n            await updateDoc(doc(db, \"albums\", id), {\n              imagesInfo: data\n            });\n          };\n          update();\n          clearInputs();\n          setNewimageDetails(null);\n          toast.success(\"Image Edited Successfully\");\n          setShowImagesForm(!showImagesForm);\n        } else {\n          addImage({\n            imgTitle: title,\n            imgUrl: url\n          });\n          clearInputs();\n        }\n      }).catch(() => {\n        toast.error(\"Invalid URl\");\n      });\n    } else {\n      toast.error(\"Input Fields can't be Empty\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"images-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add an Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: titleRef,\n      className: \"images-title\",\n      maxLength: 30,\n      placeholder: \"Enter Image Title...\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: urlRef,\n      className: \"images-url\",\n      placeholder: \"Enter Image URL...\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"create-btn\",\n      onClick: submit,\n      children: newimageDetails ? \"Edit\" : \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"clear-btn\",\n      onClick: clearInputs,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n_s(ImagesForm, \"JWLEIlLi4cUOKF8PQEYiYZ2a46M=\");\n_c = ImagesForm;\nexport default ImagesForm;\nvar _c;\n$RefreshReg$(_c, \"ImagesForm\");","map":{"version":3,"names":["useEffect","useRef","db","toast","doc","updateDoc","jsxDEV","_jsxDEV","ImagesForm","addImage","newimageDetails","showImagesForm","setShowImagesForm","setNewimageDetails","_s","titleRef","urlRef","current","focus","value","imgData","imgTitle","imgUrl","clearInputs","checkURL","url","img","Image","src","Promise","resolve","reject","onload","onerror","submit","title","trim","then","id","data","index","temp","splice","i","error","update","imagesInfo","success","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","maxLength","placeholder","required","onClick","_c","$RefreshReg$"],"sources":["/home/codex/skills/webDev/react/project/photofolio/photos/src/components/ImagesForm.js"],"sourcesContent":["// importing hooks, firebase, toastify\nimport { useEffect, useRef } from \"react\";\nimport { db } from \"../firebaseInit\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { doc, updateDoc } from \"firebase/firestore\";\n\n\nfunction ImagesForm({ addImage, newimageDetails, showImagesForm, setShowImagesForm, setNewimageDetails }) {\n    // use ref for handling the input field values\n    const titleRef = useRef();\n    const urlRef = useRef();\n \n    // use effect for auto-focusing on the input once page is loaded\n    useEffect(() => {\n        titleRef.current.focus();\n    })\n    // use effect for auto filling the details of the img which was selected for editing\n    useEffect(() => {\n        if (newimageDetails) {\n            titleRef.current.value = newimageDetails.imgData.imgTitle;\n            urlRef.current.value = newimageDetails.imgData.imgUrl;\n        }\n    }, [newimageDetails])\n\n    // function to clear the input fields and to focus on title input\n    function clearInputs() {\n        titleRef.current.value = \"\";\n        urlRef.current.value = \"\";\n        titleRef.current.focus();\n    }\n\n    // function to check dead link\n    function checkURL(url) {\n        const img = new Image();\n        img.src = url;\n        return new Promise((resolve, reject) => {\n            img.onload = () => resolve(true);\n            img.onerror = () => reject(false);\n        })\n    }\n\n    // function to handle the editing or adding of the img based on the status of the link\n    function submit() {\n        let title = titleRef.current.value;\n        let url = urlRef.current.value;\n        if(title.trim()){\n            checkURL(url).then(() => {\n                // if url is active edit it or add it based on what user intents\n                if(newimageDetails){\n                    const { id, data, index } = newimageDetails;\n                    let temp = [...data];\n                    temp.splice(index, 1);\n                    for(let i of temp){\n                        if(title === i.imgTitle){\n                            toast.error(\"Image Already Exists\");\n                            return;\n                        }\n                    }\n                    data.splice(index, 1, {imgTitle: title, imgUrl: url});\n                    const update = async () => {\n                        await updateDoc(doc(db,\"albums\",id), {\n                            imagesInfo: data\n                        })\n                    }\n                    update();\n                    clearInputs();\n                    setNewimageDetails(null);\n                    toast.success(\"Image Edited Successfully\");\n                    setShowImagesForm(!showImagesForm);\n                }\n                else{\n                    addImage({imgTitle: title, imgUrl: url});\n                    clearInputs();\n                }\n            }).catch(() => {\n                toast.error(\"Invalid URl\")\n            });\n        }\n        else{\n            toast.error(\"Input Fields can't be Empty\")\n        }\n    }\n\n    return (\n        <form className=\"images-form\">\n            <h2>Add an Image</h2>\n            <input type=\"text\" ref={titleRef} className=\"images-title\" maxLength={30} placeholder=\"Enter Image Title...\" required/>\n            <input type=\"text\" ref={urlRef} className=\"images-url\" placeholder=\"Enter Image URL...\" required/>\n            <button type=\"button\" className=\"create-btn\" onClick={submit}>\n                {newimageDetails ? \"Edit\" : \"Add\"}\n            </button>\n            <button type=\"button\" className=\"clear-btn\" onClick={clearInputs}>Clear</button>\n        </form>\n    );\n}\n\nexport default ImagesForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}